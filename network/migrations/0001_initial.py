# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2017-12-17 14:56
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import picklefield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Assembly',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True)),
                ('chromosome_sizes', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('slug', models.CharField(max_length=128)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('description', models.TextField(blank=True)),
                ('ambiguous_url', models.URLField(blank=True, null=True)),
                ('plus_url', models.URLField(blank=True, null=True)),
                ('minus_url', models.URLField(blank=True, null=True)),
                ('consortial_id', models.CharField(default=None, max_length=128, null=True, unique=True)),
                ('processed', models.BooleanField(default=False)),
                ('assembly', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Assembly')),
            ],
            options={
                'get_latest_by': 'created',
            },
        ),
        migrations.CreateModel(
            name='DatasetDataDistance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.FloatField()),
                ('dataset_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='network_datasetdatadistance_first', to='network.Dataset')),
                ('dataset_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='network_datasetdatadistance_second', to='network.Dataset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DatasetIntersection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_value', models.FloatField()),
                ('normalized_value', models.FloatField()),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Dataset')),
            ],
        ),
        migrations.CreateModel(
            name='DatasetMetadataDistance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.FloatField()),
                ('dataset_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='network_datasetmetadatadistance_first', to='network.Dataset')),
                ('dataset_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='network_datasetmetadatadistance_second', to='network.Dataset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Enhancer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('chromosome', models.CharField(max_length=32)),
                ('start', models.IntegerField()),
                ('end', models.IntegerField()),
                ('annotation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Annotation')),
            ],
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cell_type', models.CharField(max_length=128)),
                ('target', models.CharField(blank=True, max_length=128)),
                ('name', models.CharField(max_length=128)),
                ('slug', models.CharField(max_length=128)),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('consortial_id', models.CharField(default=None, max_length=128, null=True, unique=True)),
                ('processed', models.BooleanField(default=False)),
            ],
            options={
                'get_latest_by': 'created',
            },
        ),
        migrations.CreateModel(
            name='ExperimentDataDistance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.FloatField()),
                ('experiment_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='network_experimentdatadistance_first', to='network.Experiment')),
                ('experiment_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='network_experimentdatadistance_second', to='network.Experiment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExperimentFavorite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('favorite', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Experiment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExperimentIntersection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('average_value', models.FloatField()),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Experiment')),
            ],
        ),
        migrations.CreateModel(
            name='ExperimentMetadataDistance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.FloatField()),
                ('experiment_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='network_experimentmetadatadistance_first', to='network.Experiment')),
                ('experiment_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='network_experimentmetadatadistance_second', to='network.Experiment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExperimentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('short_name', models.CharField(max_length=64)),
                ('relevant_regions', models.CharField(choices=[('promoter', 'promoter'), ('genebody', 'genebody'), ('mRNA', 'mRNA'), ('enhancer', 'enhancer')], max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='Gene',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('annotation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Annotation')),
            ],
        ),
        migrations.CreateModel(
            name='IDF',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idf', django.contrib.postgres.fields.jsonb.JSONField()),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('assembly', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Assembly')),
                ('experiment_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.ExperimentType')),
            ],
        ),
        migrations.CreateModel(
            name='Locus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('strand', models.CharField(choices=[('+', '+'), ('-', '-')], max_length=1, null=True)),
                ('chromosome', models.CharField(max_length=32)),
                ('regions', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=2), size=None)),
                ('enhancer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='network.Enhancer')),
            ],
        ),
        migrations.CreateModel(
            name='LocusGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_type', models.CharField(choices=[('promoter', 'promoter'), ('genebody', 'genebody'), ('mRNA', 'mRNA'), ('enhancer', 'enhancer')], max_length=32)),
                ('assembly', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Assembly')),
            ],
        ),
        migrations.CreateModel(
            name='MetaPlot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metaplot', django.contrib.postgres.fields.jsonb.JSONField()),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Dataset')),
                ('locus_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.LocusGroup')),
            ],
        ),
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(max_length=128)),
                ('favorite_data', models.ManyToManyField(blank=True, to='network.Dataset')),
                ('favorite_users', models.ManyToManyField(blank=True, to='network.MyUser')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Ontology',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
                ('ontology_type', models.CharField(choices=[('GeneOntology', 'GeneOntology'), ('DiseaseOntology', 'DiseaseOntology'), ('CellOntology', 'CellOntology'), ('CellLineOntology', 'CellLineOntology')], max_length=64)),
                ('obo_file', models.FilePathField(path='/Users/lavenderca/genomics_network/data')),
                ('ac_file', models.FilePathField(path='/Users/lavenderca/genomics_network/data')),
            ],
        ),
        migrations.CreateModel(
            name='PCA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plot', django.contrib.postgres.fields.jsonb.JSONField()),
                ('pca', picklefield.fields.PickledObjectField(editable=False)),
                ('covariation_matrix', picklefield.fields.PickledObjectField(blank=True, editable=False, null=True)),
                ('inverse_covariation_matrix', picklefield.fields.PickledObjectField(blank=True, editable=False, null=True)),
                ('experiment_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.ExperimentType')),
                ('locus_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.LocusGroup')),
            ],
        ),
        migrations.CreateModel(
            name='PCALocusOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField()),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('locus', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Locus')),
                ('pca', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.PCA')),
            ],
        ),
        migrations.CreateModel(
            name='PCATransformedValues',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transformed_values', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=3)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Dataset')),
                ('pca', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.PCA')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('description', models.TextField(blank=True)),
                ('owners', models.ManyToManyField(blank=True, to='network.MyUser')),
            ],
        ),
        migrations.CreateModel(
            name='TfidfVectorizer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tfidf_vectorizer', picklefield.fields.PickledObjectField(editable=False)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('assembly', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Assembly')),
                ('experiment_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.ExperimentType')),
            ],
        ),
        migrations.CreateModel(
            name='Transcript',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('chromosome', models.CharField(max_length=32)),
                ('strand', models.CharField(choices=[('+', '+'), ('-', '-')], max_length=1)),
                ('start', models.IntegerField()),
                ('end', models.IntegerField()),
                ('exons', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=2), size=None)),
                ('gene', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Gene')),
            ],
        ),
        migrations.CreateModel(
            name='UserFavorite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('favorite', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite', to='network.MyUser')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.MyUser')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserToExperimentSimilarity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField()),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Experiment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.MyUser')),
            ],
        ),
        migrations.AddField(
            model_name='pca',
            name='selected_loci',
            field=models.ManyToManyField(through='network.PCALocusOrder', to='network.Locus'),
        ),
        migrations.AddField(
            model_name='pca',
            name='transformed_datasets',
            field=models.ManyToManyField(through='network.PCATransformedValues', to='network.Dataset'),
        ),
        migrations.AddField(
            model_name='locus',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.LocusGroup'),
        ),
        migrations.AddField(
            model_name='locus',
            name='transcript',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='network.Transcript'),
        ),
        migrations.AddField(
            model_name='gene',
            name='selected_transcript',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='selecting', to='network.Transcript'),
        ),
        migrations.AddField(
            model_name='experimentintersection',
            name='locus',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Locus'),
        ),
        migrations.AddField(
            model_name='experimentfavorite',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.MyUser'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='experiment_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.ExperimentType'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='owners',
            field=models.ManyToManyField(blank=True, to='network.MyUser'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='network.Project'),
        ),
        migrations.AddField(
            model_name='datasetintersection',
            name='locus',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Locus'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='experiment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='network.Experiment'),
        ),
        migrations.AddField(
            model_name='annotation',
            name='assembly',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Assembly'),
        ),
        migrations.AlterUniqueTogether(
            name='usertoexperimentsimilarity',
            unique_together=set([('user', 'experiment')]),
        ),
        migrations.AlterUniqueTogether(
            name='experimentmetadatadistance',
            unique_together=set([('experiment_1', 'experiment_2')]),
        ),
        migrations.AlterUniqueTogether(
            name='experimentintersection',
            unique_together=set([('locus', 'experiment')]),
        ),
        migrations.AlterUniqueTogether(
            name='experimentdatadistance',
            unique_together=set([('experiment_1', 'experiment_2')]),
        ),
        migrations.AlterUniqueTogether(
            name='datasetmetadatadistance',
            unique_together=set([('dataset_1', 'dataset_2')]),
        ),
        migrations.AlterUniqueTogether(
            name='datasetintersection',
            unique_together=set([('locus', 'dataset')]),
        ),
        migrations.AlterUniqueTogether(
            name='datasetdatadistance',
            unique_together=set([('dataset_1', 'dataset_2')]),
        ),
    ]
