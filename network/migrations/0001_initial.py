# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2017-08-11 15:00
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import picklefield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('gtf_file', models.FileField(upload_to='')),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Assembly',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True)),
                ('chromosome_sizes', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True)),
                ('ambiguous_url', models.URLField(blank=True, null=True)),
                ('plus_url', models.URLField(blank=True, null=True)),
                ('minus_url', models.URLField(blank=True, null=True)),
                ('name', models.CharField(max_length=128)),
                ('slug', models.CharField(max_length=128)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('assembly', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Assembly')),
            ],
            options={
                'get_latest_by': 'created',
            },
        ),
        migrations.CreateModel(
            name='DatasetDataDistance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.FloatField()),
                ('dataset_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='network_datasetdatadistance_first', to='network.Dataset')),
                ('dataset_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='network_datasetdatadistance_second', to='network.Dataset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DatasetMetadataDistance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.FloatField()),
                ('dataset_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='network_datasetmetadatadistance_first', to='network.Dataset')),
                ('dataset_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='network_datasetmetadatadistance_second', to='network.Dataset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cell_type', models.CharField(max_length=128)),
                ('target', models.CharField(blank=True, max_length=128)),
                ('name', models.CharField(max_length=128)),
                ('slug', models.CharField(max_length=128)),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'get_latest_by': 'created',
            },
        ),
        migrations.CreateModel(
            name='ExperimentCorrelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField()),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ExperimentDataDistance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.FloatField()),
                ('experiment_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='network_experimentdatadistance_first', to='network.Experiment')),
                ('experiment_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='network_experimentdatadistance_second', to='network.Experiment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExperimentFavorite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('favorite', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Experiment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExperimentMetadataDistance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.FloatField()),
                ('experiment_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='network_experimentmetadatadistance_first', to='network.Experiment')),
                ('experiment_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='network_experimentmetadatadistance_second', to='network.Experiment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExperimentRecommendation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('hidden', models.BooleanField(default=False)),
                ('correlation_rank', models.IntegerField()),
                ('metadata_rank', models.IntegerField()),
                ('collaborative_rank', models.IntegerField()),
                ('correlation_experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='correlation', to='network.Experiment')),
                ('metadata_experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metadata', to='network.Experiment')),
            ],
        ),
        migrations.CreateModel(
            name='ExperimentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('short_name', models.CharField(max_length=64)),
                ('relevant_regions', models.CharField(choices=[('coding', 'coding'), ('genebody', 'genebody'), ('promoter', 'promoter')], max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='Gene',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('promoter_var_rank', models.IntegerField(blank=True, null=True)),
                ('genebody_var_rank', models.IntegerField(blank=True, null=True)),
                ('coding_var_rank', models.IntegerField(blank=True, null=True)),
                ('annotation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Annotation')),
            ],
        ),
        migrations.CreateModel(
            name='GenomicRegions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('bed_file', models.FileField(upload_to='')),
                ('short_label', models.CharField(max_length=32)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('variance', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('variance_mask', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('pca', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('assembly', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Assembly')),
            ],
        ),
        migrations.CreateModel(
            name='IntersectionValues',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('intersection_values', django.contrib.postgres.fields.jsonb.JSONField()),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Dataset')),
                ('genomic_regions', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.GenomicRegions')),
            ],
        ),
        migrations.CreateModel(
            name='MetadataCorrelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField()),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('x_experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='x_meta', to='network.Experiment')),
                ('y_experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='y_meta', to='network.Experiment')),
            ],
        ),
        migrations.CreateModel(
            name='MetaPlot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meta_plot', django.contrib.postgres.fields.jsonb.JSONField()),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Dataset')),
                ('genomic_regions', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.GenomicRegions')),
            ],
        ),
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(max_length=128)),
                ('favorite_data', models.ManyToManyField(blank=True, to='network.Dataset')),
                ('favorite_users', models.ManyToManyField(blank=True, to='network.MyUser')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PCA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plot', django.contrib.postgres.fields.jsonb.JSONField()),
                ('pca', picklefield.fields.PickledObjectField(editable=False)),
                ('covariation_matrix', picklefield.fields.PickledObjectField(blank=True, editable=False, null=True)),
                ('inverse_covariation_matrix', picklefield.fields.PickledObjectField(blank=True, editable=False, null=True)),
                ('annotation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Annotation')),
                ('experiment_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.ExperimentType')),
            ],
        ),
        migrations.CreateModel(
            name='PCATranscriptOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField()),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('pca', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.PCA')),
            ],
        ),
        migrations.CreateModel(
            name='PCATransformedValues',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transformed_values', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=3)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Dataset')),
                ('pca', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.PCA')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('description', models.TextField(blank=True)),
                ('owners', models.ManyToManyField(blank=True, to='network.MyUser')),
            ],
        ),
        migrations.CreateModel(
            name='TfidfVectorizer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tfidf_vectorizer', picklefield.fields.PickledObjectField(editable=False)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('annotation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Annotation')),
                ('experiment_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.ExperimentType')),
            ],
        ),
        migrations.CreateModel(
            name='Transcript',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('chromosome', models.CharField(max_length=32)),
                ('strand', models.CharField(choices=[('+', '+'), ('-', '-')], max_length=1)),
                ('start', models.IntegerField()),
                ('end', models.IntegerField()),
                ('exons', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=2), size=None)),
                ('gene', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Gene')),
            ],
        ),
        migrations.CreateModel(
            name='TranscriptIntersection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('promoter_value', models.FloatField()),
                ('genebody_value', models.FloatField()),
                ('exon_values', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('intron_values', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('normalized_promoter_value', models.FloatField()),
                ('normalized_genebody_value', models.FloatField()),
                ('normalized_coding_value', models.FloatField()),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Dataset')),
                ('transcript', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Transcript')),
            ],
        ),
        migrations.CreateModel(
            name='UserFavorite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('favorite', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite', to='network.MyUser')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.MyUser')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserRecommendation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('hidden', models.BooleanField(default=False)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.MyUser')),
                ('recommended', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommended', to='network.MyUser')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='pcatranscriptorder',
            name='transcript',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Transcript'),
        ),
        migrations.AddField(
            model_name='pca',
            name='selected_transcripts',
            field=models.ManyToManyField(through='network.PCATranscriptOrder', to='network.Transcript'),
        ),
        migrations.AddField(
            model_name='pca',
            name='transformed_datasets',
            field=models.ManyToManyField(through='network.PCATransformedValues', to='network.Dataset'),
        ),
        migrations.AddField(
            model_name='gene',
            name='highest_exp_coding_transcript',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='coding', to='network.Transcript'),
        ),
        migrations.AddField(
            model_name='gene',
            name='highest_exp_genebody_transcript',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='genebody', to='network.Transcript'),
        ),
        migrations.AddField(
            model_name='gene',
            name='highest_exp_promoter_transcript',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='promoter', to='network.Transcript'),
        ),
        migrations.AddField(
            model_name='experimentrecommendation',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.MyUser'),
        ),
        migrations.AddField(
            model_name='experimentrecommendation',
            name='recommended',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.Experiment'),
        ),
        migrations.AddField(
            model_name='experimentfavorite',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.MyUser'),
        ),
        migrations.AddField(
            model_name='experimentcorrelation',
            name='genomic_regions',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.GenomicRegions'),
        ),
        migrations.AddField(
            model_name='experimentcorrelation',
            name='x_experiment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='x_value', to='network.Experiment'),
        ),
        migrations.AddField(
            model_name='experimentcorrelation',
            name='y_experiment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='y_value', to='network.Experiment'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='experiment_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='network.ExperimentType'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='owners',
            field=models.ManyToManyField(blank=True, to='network.MyUser'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='network.Project'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='experiment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='network.Experiment'),
        ),
        migrations.AddField(
            model_name='annotation',
            name='assembly',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='network.Assembly'),
        ),
        migrations.AlterUniqueTogether(
            name='metadatacorrelation',
            unique_together=set([('x_experiment', 'y_experiment')]),
        ),
        migrations.AlterUniqueTogether(
            name='experimentrecommendation',
            unique_together=set([('owner', 'recommended')]),
        ),
        migrations.AlterUniqueTogether(
            name='experimentmetadatadistance',
            unique_together=set([('experiment_1', 'experiment_2')]),
        ),
        migrations.AlterUniqueTogether(
            name='experimentdatadistance',
            unique_together=set([('experiment_1', 'experiment_2')]),
        ),
        migrations.AlterUniqueTogether(
            name='experimentcorrelation',
            unique_together=set([('x_experiment', 'y_experiment', 'genomic_regions')]),
        ),
        migrations.AlterUniqueTogether(
            name='datasetmetadatadistance',
            unique_together=set([('dataset_1', 'dataset_2')]),
        ),
        migrations.AlterUniqueTogether(
            name='datasetdatadistance',
            unique_together=set([('dataset_1', 'dataset_2')]),
        ),
    ]
